{
    "docs": [
        {
            "location": "/",
            "text": "AssetsToC Wiki\n\u00b6\n\n\nAssetsToC (or short \natoc\n) is an advanced genration system for building C code out of asset files.\n\n\nExample\n\u00b6\n\n\n.atoc\n:\n\n\ntest.txt \n|\n \ntest \n>\n \nout.hpp\n\n\n\n\n\n\ntest.txt\n:\n\n\nHello World!\n\n\n\n\n\n\nWill be generated as \nout.hpp\n:\n\n\nconst\n \nunsigned\n \nchar\n[\n12\n]\n \ntest\n \n=\n \n{\n0x48\n,\n0x65\n,\n0x6c\n,\n0x6c\n,\n0x6f\n,\n0x20\n,\n0x57\n,\n0x6f\n,\n0x72\n,\n0x6c\n,\n0x64\n,\n0x21\n};\n\n\nconst\n \nunsigned\n \ntest_size\n \n=\n \n12\n;",
            "title": "Home"
        },
        {
            "location": "/#assetstoc-wiki",
            "text": "AssetsToC (or short  atoc ) is an advanced genration system for building C code out of asset files.",
            "title": "AssetsToC Wiki"
        },
        {
            "location": "/#example",
            "text": ".atoc :  test.txt  |   test  >   out.hpp   test.txt :  Hello World!   Will be generated as  out.hpp :  const   unsigned   char [ 12 ]   test   =   { 0x48 , 0x65 , 0x6c , 0x6c , 0x6f , 0x20 , 0x57 , 0x6f , 0x72 , 0x6c , 0x64 , 0x21 };  const   unsigned   test_size   =   12 ;",
            "title": "Example"
        },
        {
            "location": "/syntax/",
            "text": "Basics\n\u00b6\n\n\nPaths\n\u00b6\n\n\nAll path, directory and filename declarations used by AssetsToC are relativ paths relative to the current output or input directory. AssetsToC is meant to be a completely dynamic generation system and it doesn't like to be offended by absolute paths.\n\n\nThe only absolute paths can be specified when \nrunning the \natoc\n command\n.\n\n\nStatements\n\u00b6\n\n\nA statement is a declaration for actually generating the C code out of the given asset file(s).\nTheir syntax will be covered \na bit later in this document\n.\n\n\nAll statements end with a semicolon or, for convenience of those ridiculous python developers, a line break.\n\n\nComments\n\u00b6\n\n\nYou can declare comment lines by using an \n#\n as the first readable symbol in a line:\n\n\n# This is a comment\n\n\n\n\n\n\nGeneration\n\u00b6\n\n\nAll files are only processed when either the \n.atoc\n file or the corresponding asset files changed. Nevertheless you can force regenerating specific files by deleting the corresponding C files.\n\n\n\n\nTip\n\n\nYou can also use folder names instead of filenames to process \nall\n files in all subdirectories.\n\n\n\n\nWarning\n\n\nAssetsToC doesn't check the up-to-date state of all those files\n, it only looks at change time of the given folder which e. g. on Windoes doesn't update when changing contained files. Therefore when using folder declaration all files are processed each time you run \natoc\n. You can disable this behaviour by setting the config \n$\n force-folder-rebuild\n:\n \nfalse\n. \n\n\n\n\n\n\nSingle statements\n\u00b6\n\n\ninput.png \n|\n \nvariableName \n>\n \nout.hpp\n\n\n\n\n\n\n\n\nNote\n\n\nAs explained in the following paragraphs, all parts apart from the file input can be omitted. Their content will then be automatically generated by the criterias specified via the \nconfigurations\n.\n\n\nExample\nPer default \ntest.txt\n;\n will be inpreted as \ntest.txt \n|\n \ntestTxt \n>\n \ntesttxt.hpp\n;\n.\n\n\nFile input section\n\u00b6\n\n\nThis section is required in all statements.\n\n\nWhen beginning a line with a non-operator symbol, the parser automatically interpretes the following text as a asset filename to import.\n\n\nVariable name section\n\u00b6\n\n\nAfter a \n|\n an optional variable name can follow. When omitted it is atomatically generated using the current \nconfigurations\n.\n\n\nFile output section\n\u00b6\n\n\nAfter an output operator (\n>\n) an optional output filename can follow. When omitted it is automatically generated using the current \nconfigurations\n.\n\n\nExample\n\u00b6\n\n\n.atoc\n:\n\n\nnice_image.png \n|\n \nniiicce \n>\n \ndicer.h\n;\n\n\ntext.txt\n;\n\n\n\n\n\n\nThe first line will output the content of \nnice_image.png\n in the file \ndicer.h\n with the variable names \nniiicce\n and \nniiicce_size\n.\n\n\nThe second line will per default generate a \ntesttxt.hpp\n file with variable names based on \ntestTxt\n.\n\n\nBundle Statements\n\u00b6\n\n\nThe input/variable name section and the output section can be replaced by so called \nbundles\n.\nThey are enclosed in curly braces \n{}\n.\n\n\nFile input and variable bundles\n\u00b6\n\n\nYou can use multiple input files with or without the corresponding variable names by wrapping them in curly braces and separated by semicolons or new lines. You may also not declare the variable names and let them auto-generate like in single statements.\n\n\n\n\nBug\n\n\nFor now the last declaration in input bundles \nmust not end with a semicolon\n.\n\n\n\n\nExample\n{\n   first-file.txt \n|\n \nvar1\n\n\n    second-file.txt\n\n\n} > out.txt\n\n\n\n\n\nFile output bundles\n\u00b6\n\n\nYou may also define multiple output files. Wrap them with curly braces and seperate the different output files with semicolons. \nFor now the first file is generated and copied to the other specified locations.\n\n\nExample\ntest.txt \n>\n \n{ first-out.h; second-out.h }",
            "title": "Syntax"
        },
        {
            "location": "/syntax/#basics",
            "text": "",
            "title": "Basics"
        },
        {
            "location": "/syntax/#paths",
            "text": "All path, directory and filename declarations used by AssetsToC are relativ paths relative to the current output or input directory. AssetsToC is meant to be a completely dynamic generation system and it doesn't like to be offended by absolute paths.  The only absolute paths can be specified when  running the  atoc  command .",
            "title": "Paths"
        },
        {
            "location": "/syntax/#statements",
            "text": "A statement is a declaration for actually generating the C code out of the given asset file(s).\nTheir syntax will be covered  a bit later in this document .  All statements end with a semicolon or, for convenience of those ridiculous python developers, a line break.",
            "title": "Statements"
        },
        {
            "location": "/syntax/#comments",
            "text": "You can declare comment lines by using an  #  as the first readable symbol in a line:  # This is a comment",
            "title": "Comments"
        },
        {
            "location": "/syntax/#generation",
            "text": "All files are only processed when either the  .atoc  file or the corresponding asset files changed. Nevertheless you can force regenerating specific files by deleting the corresponding C files.   Tip  You can also use folder names instead of filenames to process  all  files in all subdirectories.   Warning  AssetsToC doesn't check the up-to-date state of all those files , it only looks at change time of the given folder which e. g. on Windoes doesn't update when changing contained files. Therefore when using folder declaration all files are processed each time you run  atoc . You can disable this behaviour by setting the config  $  force-folder-rebuild :   false .",
            "title": "Generation"
        },
        {
            "location": "/syntax/#single-statements",
            "text": "input.png  |   variableName  >   out.hpp    Note  As explained in the following paragraphs, all parts apart from the file input can be omitted. Their content will then be automatically generated by the criterias specified via the  configurations .  Example Per default  test.txt ;  will be inpreted as  test.txt  |   testTxt  >   testtxt.hpp ; .",
            "title": "Single statements"
        },
        {
            "location": "/syntax/#file-input-section",
            "text": "This section is required in all statements.  When beginning a line with a non-operator symbol, the parser automatically interpretes the following text as a asset filename to import.",
            "title": "File input section"
        },
        {
            "location": "/syntax/#variable-name-section",
            "text": "After a  |  an optional variable name can follow. When omitted it is atomatically generated using the current  configurations .",
            "title": "Variable name section"
        },
        {
            "location": "/syntax/#file-output-section",
            "text": "After an output operator ( > ) an optional output filename can follow. When omitted it is automatically generated using the current  configurations .",
            "title": "File output section"
        },
        {
            "location": "/syntax/#example",
            "text": ".atoc :  nice_image.png  |   niiicce  >   dicer.h ;  text.txt ;   The first line will output the content of  nice_image.png  in the file  dicer.h  with the variable names  niiicce  and  niiicce_size .  The second line will per default generate a  testtxt.hpp  file with variable names based on  testTxt .",
            "title": "Example"
        },
        {
            "location": "/syntax/#bundle-statements",
            "text": "The input/variable name section and the output section can be replaced by so called  bundles .\nThey are enclosed in curly braces  {} .",
            "title": "Bundle Statements"
        },
        {
            "location": "/syntax/#file-input-and-variable-bundles",
            "text": "You can use multiple input files with or without the corresponding variable names by wrapping them in curly braces and separated by semicolons or new lines. You may also not declare the variable names and let them auto-generate like in single statements.   Bug  For now the last declaration in input bundles  must not end with a semicolon .   Example {    first-file.txt  |   var1      second-file.txt  } > out.txt",
            "title": "File input and variable bundles"
        },
        {
            "location": "/syntax/#file-output-bundles",
            "text": "You may also define multiple output files. Wrap them with curly braces and seperate the different output files with semicolons.  For now the first file is generated and copied to the other specified locations.  Example test.txt  >   { first-out.h; second-out.h }",
            "title": "File output bundles"
        },
        {
            "location": "/config/",
            "text": "Syntax\n\u00b6\n\n\nAll config lines begin with a dollar sign as their first non-whitespace character. \n\n\nIn those lines the actual configuration is given as key-value-pairs.\n\n\n$\n key\n:\n value\n;\n foo\n:\n bar\n\n\n\n\n\n\n\n\nTip\n\n\nYou can get a list of all available config options by using the \n--help-config\n argument when running the excutable in your favourite console.\n\n\nThe list contains the config keys the corresponding value types along with the default value.\n\n\n\n\nValue types\n\u00b6\n\n\nThere are currently three different value types in the config:\n\n\n\n\nstring\n: just a basic text, nothing special\n\n\nboolean\n: either \ntrue\n or \nfalse\n\n\nnumber\n: an unsigned integer\n\n\n\n\nAdditionally some configs must not be empty or must not be zero.\n\n\nConfig list\n\u00b6\n\n\nGeneral\n\u00b6\n\n\n\n\ninput-buffer-size\n (\ninteger\n  - \nnon-zero\n, default: \n1024\n): sets the size of the buffer for reading in files in bytes; higher values will make the program a little bit more efficient but make it use more memory\n\n\nforce-folder-rebuild\n (\nboolean\n, default: \ntrue\n): sets wether statements with folders instead of files will be forced to be rebuilt\n\n\n\n\nDirectory handling\n\u00b6\n\n\nOne of the most important uses for the config is to modify the input and output root directory. The config system provides three keys for that purpose.\n\n\n\n\ncopy-folder-system\n (\nboolean\n, default: \nfalse\n): sets wether to use the same subdirectory structure as given in the input when \ndeclaring statements with folders\n\n\ninput-dir\n (\nstring\n, default: empty): appends its value to the input root directory (\npassed to the executable\n)\n\n\noutput-dir\n (\nstring\n, default: empty): appends its value to the output root directory\n\n\n\n\nExample\n$\n input-dir\n:\n in\n;\n output-dir\n:\n out\n\n\ninput.txt \n>\n \noutput.h\n;\n\n\ninput \n>\n \njhkj\n\n\n# Same as in/input.txt > out/output.h\n\n\n\n\n\n\n\nTip\n\n\nBecause the last two options are commonly used in the \n.atoc\n files there are also short declarations for them:\n\n\n<\n new-input-directory\n\n\n>\n new-output-directory\n\n\n\n\n\n\n\n\nAutomatic name generation\n\u00b6\n\n\nAnother useful purpose is to get control over the automatic variable and filename generation.\n\n\nThe generator takes the relative path beginning at the current root (settable with \ninput-dir\n and \noutput-dir\n) along with the file extension and uses them as \"words\". These words are concatened under special modifiable conditions set through the config system.\n\n\nThe following list contains the suffixes to use with either \narray-name-\n (variables) or \nfile-\n:\n\n\n\n\ncapital\n (\nboolean\n, default: \nfalse\n): sets wether the first word should be upper case\n\n\ndelimiter\n (\nstring\n, default: empty): sets the delimiter to put beween to words\n\n\ncamelcase\n (\nboolean\n, default: \ntrue\n for variables, \nfalse\n for files): sets wether the words should be printed in the camelCase style\n\n\ninclude-extension\n (\nboolean\n, default: \ntrue\n): sets wether the extension is used as word\n\n\ninclude-folders\n (\nboolean\n, default: \ntrue\n for variables. \nfalse\n for files): sets wether the path to the file should be included as words\n\n\n\n\nFile content\n\u00b6\n\n\n\n\narray-size\n (\nboolean\n, default: \ntrue\n): sets wether to output a size variable containing the size of the array\n\n\narray-size-suffix\n (\nstring\n, default: \n_size\n): sets the suffix to put after file size variable names; e. g. (if set to \n_porkchopMedia\n): \nconst\n \nunsigned\n \nvariableName_porkchopMedia\n\n\narray-size-type\n (\nstring\n, default: \nconst unsigned\n): sets the type to use for file size variables\n\n\narray-type\n (\nstring\n, default: \nconst unsigned char\n): sets the type for the main variables (the \n[]\n is always appended)\n\n\nuse-hex\n (\nboolean\n, default: \ntrue\n): sets wether to output the symbols in hex or decimal notation",
            "title": "Config"
        },
        {
            "location": "/config/#syntax",
            "text": "All config lines begin with a dollar sign as their first non-whitespace character.   In those lines the actual configuration is given as key-value-pairs.  $  key :  value ;  foo :  bar    Tip  You can get a list of all available config options by using the  --help-config  argument when running the excutable in your favourite console.  The list contains the config keys the corresponding value types along with the default value.",
            "title": "Syntax"
        },
        {
            "location": "/config/#value-types",
            "text": "There are currently three different value types in the config:   string : just a basic text, nothing special  boolean : either  true  or  false  number : an unsigned integer   Additionally some configs must not be empty or must not be zero.",
            "title": "Value types"
        },
        {
            "location": "/config/#config-list",
            "text": "",
            "title": "Config list"
        },
        {
            "location": "/config/#general",
            "text": "input-buffer-size  ( integer   -  non-zero , default:  1024 ): sets the size of the buffer for reading in files in bytes; higher values will make the program a little bit more efficient but make it use more memory  force-folder-rebuild  ( boolean , default:  true ): sets wether statements with folders instead of files will be forced to be rebuilt",
            "title": "General"
        },
        {
            "location": "/config/#directory-handling",
            "text": "One of the most important uses for the config is to modify the input and output root directory. The config system provides three keys for that purpose.   copy-folder-system  ( boolean , default:  false ): sets wether to use the same subdirectory structure as given in the input when  declaring statements with folders  input-dir  ( string , default: empty): appends its value to the input root directory ( passed to the executable )  output-dir  ( string , default: empty): appends its value to the output root directory   Example $  input-dir :  in ;  output-dir :  out  input.txt  >   output.h ;  input  >   jhkj  # Same as in/input.txt > out/output.h    Tip  Because the last two options are commonly used in the  .atoc  files there are also short declarations for them:  <  new-input-directory  >  new-output-directory",
            "title": "Directory handling"
        },
        {
            "location": "/config/#automatic-name-generation",
            "text": "Another useful purpose is to get control over the automatic variable and filename generation.  The generator takes the relative path beginning at the current root (settable with  input-dir  and  output-dir ) along with the file extension and uses them as \"words\". These words are concatened under special modifiable conditions set through the config system.  The following list contains the suffixes to use with either  array-name-  (variables) or  file- :   capital  ( boolean , default:  false ): sets wether the first word should be upper case  delimiter  ( string , default: empty): sets the delimiter to put beween to words  camelcase  ( boolean , default:  true  for variables,  false  for files): sets wether the words should be printed in the camelCase style  include-extension  ( boolean , default:  true ): sets wether the extension is used as word  include-folders  ( boolean , default:  true  for variables.  false  for files): sets wether the path to the file should be included as words",
            "title": "Automatic name generation"
        },
        {
            "location": "/config/#file-content",
            "text": "array-size  ( boolean , default:  true ): sets wether to output a size variable containing the size of the array  array-size-suffix  ( string , default:  _size ): sets the suffix to put after file size variable names; e. g. (if set to  _porkchopMedia ):  const   unsigned   variableName_porkchopMedia  array-size-type  ( string , default:  const unsigned ): sets the type to use for file size variables  array-type  ( string , default:  const unsigned char ): sets the type for the main variables (the  []  is always appended)  use-hex  ( boolean , default:  true ): sets wether to output the symbols in hex or decimal notation",
            "title": "File content"
        },
        {
            "location": "/execution/",
            "text": "General\n\u00b6\n\n\nThe basic command line syntax looks like this:\n\n\natoc [<input-dir> [<output-dir>]] [<args]\n\n\n\n\n\ninput-dir\n and \noutput-dir\n are also usable via their argument counterparts and do the following:\n\n\n\n\n--input-dir\n: sets the input root directory; if not given the current directory is used\n\n\n--output-dir\n: sets the output root directory; if not give, same as \n--input-dir\n\n\n\n\nUtility\n\u00b6\n\n\nThere are a few arguments to help coming along with the executable:\n\n\n\n\n--help\n: lists all available arguments\n\n\n--help-config\n: lists all available in-app \nconfig\n keys\n\n\n--version\n: displays the current version",
            "title": "Execution"
        },
        {
            "location": "/execution/#general",
            "text": "The basic command line syntax looks like this:  atoc [<input-dir> [<output-dir>]] [<args]  input-dir  and  output-dir  are also usable via their argument counterparts and do the following:   --input-dir : sets the input root directory; if not given the current directory is used  --output-dir : sets the output root directory; if not give, same as  --input-dir",
            "title": "General"
        },
        {
            "location": "/execution/#utility",
            "text": "There are a few arguments to help coming along with the executable:   --help : lists all available arguments  --help-config : lists all available in-app  config  keys  --version : displays the current version",
            "title": "Utility"
        },
        {
            "location": "/install/",
            "text": "Prerequisites\n\u00b6\n\n\nThis project uses the \nBoost library\n and the \nCMake\n build system.\n\n\nIn boost you need to compile the binaries for log, filesystem and program_options.\n\n\nInstallation\n\u00b6\n\n\n\n\nClone or download this project locally\n\n\nOpen the console in the project root directory\n\n\nUse \nmkdir build\n to create your build directory\n\n\nEnter this directory (\ncd build\n)\n\n\nRun \ncmake -G \"<your C++ compiler suite>\" ..\n (e. g. \ncmake -G \"MinGW Makefiles\" ..\n)\n\n\nRun \nmake\n or \nmingw32-make\n\n\nThe atoc binary should be ready in the \nbin\n directory\n\n\n\n\nGet started\n\u00b6\n\n\nSee \nHome\n for a simple example and \nSyntax\n for a more advanced look at how to use AssetsToC.",
            "title": "Install"
        },
        {
            "location": "/install/#prerequisites",
            "text": "This project uses the  Boost library  and the  CMake  build system.  In boost you need to compile the binaries for log, filesystem and program_options.",
            "title": "Prerequisites"
        },
        {
            "location": "/install/#installation",
            "text": "Clone or download this project locally  Open the console in the project root directory  Use  mkdir build  to create your build directory  Enter this directory ( cd build )  Run  cmake -G \"<your C++ compiler suite>\" ..  (e. g.  cmake -G \"MinGW Makefiles\" .. )  Run  make  or  mingw32-make  The atoc binary should be ready in the  bin  directory",
            "title": "Installation"
        },
        {
            "location": "/install/#get-started",
            "text": "See  Home  for a simple example and  Syntax  for a more advanced look at how to use AssetsToC.",
            "title": "Get started"
        },
        {
            "location": "/about/",
            "text": "AssetsToC is developed by Siphalor.\n\n\nIf you have any suggestions or found an issue you can submit it through GitHub \nhere\n.\n\n\nLicense and contributing\n\u00b6\n\n\nThis software is released under the Mozilla Public License 2.0.\n\n\nYou may find the actual license of AssetsToC \nhere\n.",
            "title": "About"
        },
        {
            "location": "/about/#license-and-contributing",
            "text": "This software is released under the Mozilla Public License 2.0.  You may find the actual license of AssetsToC  here .",
            "title": "License and contributing"
        }
    ]
}